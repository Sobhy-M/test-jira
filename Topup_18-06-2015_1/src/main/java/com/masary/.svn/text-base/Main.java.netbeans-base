package com.masary;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import com.masary.common.CONFIG;
import com.masary.database.manager.CustomerManager;
import com.masary.utils.XMLBuilder;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.w3c.dom.Document;

/**
 *
 * @author Melad
 */
public class Main extends HttpServlet {

    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected Document processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String sessionPin = (String) request.getSession().getAttribute(CONFIG.PARAM_CUSTOMER_ID);
        String action = request.getParameter(CONFIG.PARAM_ACTION);
        Document doc = null;
        if (action.equalsIgnoreCase(CONFIG.ACTION_AUTHENTICATE)) {
            String pin = request.getParameter(CONFIG.PARAM_PIN);
            String password = request.getParameter(CONFIG.PARAM_PASSWORD);
            CustomerManager manager = CustomerManager.getInstance();
            try {
                doc = manager.authenticateCustomerPin(pin, password);
                request.getSession().setAttribute(CONFIG.PARAM_CUSTOMER_ID, manager.sessionPin);
            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } /*else if (action.equalsIgnoreCase(CONFIG.ACTION_AUTHENTICATE_ANSWER)) {
        String answer = request.getParameter(CONFIG.PARAM_ANSWER);
        String pin = request.getParameter(CONFIG.PARAM_PIN);
        try {
        doc = CustomerManager.getInstance().authenticateCustomerAnswer(pin, "", answer);
        } catch (Exception ex) {
        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        }*/ else if (action.equalsIgnoreCase(CONFIG.ACTION_CUST_TRANSFER)) {
            String payerPin = request.getParameter(CONFIG.PARAM_PAYER_PIN);
            String amount = request.getParameter(CONFIG.AMOUNT);
            CustomerManager manager = CustomerManager.getInstance();
            if (!payerPin.equals(sessionPin)) {
                return manager.securityError();
            }
            String payedPin = request.getParameter(CONFIG.PARAM_PAYED_PIN);
            doc = manager.customerToCustomerTransaction(payerPin, payedPin, amount);
        } else if (action.equalsIgnoreCase(CONFIG.ACTION_GET_LAST_TRANSACTIONS)) {
            String pin = request.getParameter(CONFIG.PARAM_PIN);
            CustomerManager manager = CustomerManager.getInstance();
            if (!pin.equals(sessionPin)) {
                return manager.securityError();
            }

            try {
                doc = manager.getLastTransactions(pin);

            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (action.equalsIgnoreCase(CONFIG.ACTION_GET_ELECT_PILL)) {
            String pin = request.getParameter(CONFIG.PARAM_PIN);
            CustomerManager manager = CustomerManager.getInstance();
            if (!pin.equals(sessionPin)) {
                return manager.securityError();
            }

            try {
                doc = manager.getElectricPill(pin);

            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }


        } else if (action.equalsIgnoreCase(CONFIG.ACTION_PAY_ELECT_PILL)) {
            String pin = request.getParameter(CONFIG.PARAM_PIN);
            CustomerManager manager = CustomerManager.getInstance();

            if (!pin.equals(sessionPin)) {
                return manager.securityError();
            }

            try {
                doc = manager.payElectricPill(pin);

            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (action.equalsIgnoreCase(CONFIG.ACTION_GET_MFI_PILL)) {
            String pin = request.getParameter(CONFIG.PARAM_PIN);
            CustomerManager manager = CustomerManager.getInstance();
            if (!pin.equals(sessionPin)) {
                return manager.securityError();
            }

            try {
                doc = manager.getMFIPill(pin);

            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (action.equalsIgnoreCase(CONFIG.ACTION_PAY_MFI_PILL)) {
            String pin = request.getParameter(CONFIG.PARAM_PIN);
            CustomerManager manager = CustomerManager.getInstance();
            if (!pin.equals(sessionPin)) {
                return manager.securityError();
            }

            try {
                doc = manager.payMFIPill(pin);

            } catch (Exception ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (action.equalsIgnoreCase(CONFIG.ACTION_GET_VERSION)) {
            CustomerManager manager = CustomerManager.getInstance();
            doc = manager.getLastVersion(getServletContext().getRealPath("Version.txt"));
        } else if (action.equalsIgnoreCase(CONFIG.ACTION_GET_JAR)) {
            RequestDispatcher dispatcher = getServletContext().
                    getRequestDispatcher(("/topupClient.jar"));
            dispatcher.forward(request, response);
        }

        return doc;
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setHeader("Pragma", "no-cache");
        response.setContentType("text/xml");
        response.setCharacterEncoding("UTF-8");
        Document doc = processRequest(request, response);
        if (doc != null) {
            response.getWriter().print(XMLBuilder.getDocumentAsString(doc));
        } else {
            response.getWriter().write("Document is null");
        }
    }

    /**
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Main Masary Transactions";
    }// </editor-fold>
}
